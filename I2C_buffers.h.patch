diff -u ~/MPLABXProjects/scandrop.X/buffers.h buffers.h
--- /home/davepl/MPLABXProjects/scandrop.X/buffers.h    2024-01-11 14:33:20.811928456 +0200
+++ buffers.h   2024-03-08 15:50:25.863911401 +0200
@@ -28,8 +28,13 @@

 // This is a guard condition so that contents of this file are not included
 // more than once.
-#ifndef XC_HEADER_TEMPLATE_H
-#define        XC_HEADER_TEMPLATE_H
+#ifndef BUFFERS_H
+#define        BUFFERS_H
+
+//#include <proc/pic18f47k40.h>
+#include "mcc_generated_files/mcc.h"
+#include <xc.h> // include processor files - each processor file is guarded.
+

 #include <stdbool.h>
 #include <string.h>
@@ -39,12 +44,60 @@
 /* Note: ISO C does not mandate that 'size_t' and 'ptrdiff_t' have the same
    size, but it is so on all platforms we have seen since 1990.  */
 typedef ptrdiff_t idx_t;
-#include <proc/pic18f47k40.h>
-#include <xc.h> // include processor files - each processor file is guarded.
-
+/*
+RD2PPS = 0x12;   //RD2->MSSP2:SDA2;
+RD3PPS = 0x11;   //RD3->MSSP2:SCL2;
+SSP2DATPPS = 0x1A;   //RD2->MSSP2:SDA2
+SSP2CLKPPS = 0x1B;   //RD3->MSSP2:SCL2;
+*/

 #endif //XC_HEADER_TEMPLATE_H

+
+/*const HEFregion[128] __at(0x1F80);*/
+/* XPM Flash storage 2048 bytes or 16 128 byte blocks each*/
+#define STORAGE_SIZE      2048
+#define BUF_SIZE          1920
+#define XPM_HEADER_SIZE   128  //This is the size of the XPM's header
+#define DISPLAY_CHAR      16 //16 characters per line
+#define DISPLAY_COL       128//Display width is 128 pixels
+__at(0x2000)
+extern const uint8_t Chan01_xpm[1920];
+__at(0x2780)
+extern const uint8_t Chan01_info[128];
+__at(0x2800)
+extern const uint8_t Chan02_xpm[1920];
+__at(0x2F80)
+extern const uint8_t Chan02_info[128];
+__at(0x3000)
+extern const uint8_t Chan03_xpm[1920];
+__at(0x3780)
+extern const uint8_t Chan03_info[128];
+__at(0x3800)
+extern const uint8_t Chan04_xpm[1920];
+__at(0x3F80)
+extern const uint8_t Chan04_info[128];
+#if 1
+const uint8_t Chan01_xpm[1920];
+const uint8_t Chan01_info[128];
+const uint8_t Chan02_xpm[1920];
+const uint8_t Chan02_info[128];
+const uint8_t Chan03_xpm[1920];
+const uint8_t Chan03_info[128];
+const uint8_t Chan04_xpm[1920];
+const uint8_t Chan04_info[128];
+#endif
+;
+extern uint8_t * srchbuf0;
+extern uint8_t * srchbuf1;
+extern uint8_t * srchbuf2;
+
+uint8_t gsmmsg[2048];
+//ussd storage
+uint8_t gsmusd[128];
+
+uint8_t * xpmaddress;
+
     bool ledredflash;
     bool ledgreenflash;
     bool ledredon;
@@ -56,9 +109,10 @@
     uint8_t ledspeed;
     uint8_t ledratio;

-
 //Gsm related memory
 uint8_t gsmbyte;
+uint16_t mmsbyte;
+uint16_t mmsbyte2;
 //moble network code 01 = Vodacom, 10 or 12 = Mtn
 uint8_t mncbyte;
 uint16_t credit;
@@ -69,14 +123,14 @@
 //moble network code 01 = Vodacom, 10 or 12 = Mtn
 //uint8_t mncbyte = 0;
 //gsm scratch pad
-uint8_t gsmmsg[512];
+
 //sms storage
-uint8_t gsmums[512];
+uint8_t gsmums[64];
 //ussd storage
-uint8_t gsmusd[128];
+//uint8_t gsmusd[128];
 //Store unsolicited notifications
-uint8_t gsmusm[128];
-uint8_t gsmtim[23];
+uint8_t gsmusm[32];
+uint8_t gsmtim[24];
 //Store date
 uint8_t gsdate[10];
 //Store time
@@ -87,8 +141,8 @@
 uint16_t index;


-uint8_t  gsmtim[23];
-uint8_t  qrbuffer[256];
+uint8_t  gsmtim[24];
+uint8_t  qrbuffer[64];
 char     base64buf[64];
 char     snap64buf[256];
 uint8_t  merchkey[40];
@@ -107,7 +161,7 @@

 uint8_t * searchbufa;

-int price;
+int16_t price;
 uint8_t channum;
 /**dispense related
  */
@@ -171,14 +225,32 @@

 uint8_t Read_timeout(uint8_t *msgadd);

-uint8_t Read_timeout1(uint8_t *msgadd);
+uint8_t Read_timeout1(uint8_t *msgadd, uint16_t lngmms);

-uint8_t Read_timeout2(uint8_t *msgadd); //10ms timeout with interrupt read
+uint8_t Read_timeout2(uint8_t *msgadd,uint16_t lngmms ); //10ms timeout with interrupt read

 uint8_t get_csq(void);

+void gsm_init(bool inittype);
+
 void Display_csq(void);

+void Get_mms(void);
+
+void parse_themms(void);
+
+void Test_pfm(void);
+
+void Read_themms(uint8_t* messbuf, uint16_t mmssize);
+
+void Store_themms(uint32_t flashadd, uint8_t* flashsrc, uint16_t mmssize );
+
+bool MyFLASH_WriteBlock(uint32_t writeAddr, uint8_t *flashWrBufPtr);
+
+void mms_init(void);
+
+void convert_mms(void);
+
 int int_sms_notify(void);

 bool Sort_sms(void);
@@ -221,6 +293,64 @@

 uint16_t DATAEE_ReadWord(uint16_t bAdd);

+void Store_XPM(uint8_t *xpmname, uint8_t* xpmstat);
+
+void Write_String(uint8_t *lcdstring, uint8_t lcdline);
+
+void Continue_String(uint8_t *clcdstring);
+
+void Write_Font(uint8_t _font);
+
+void SPI_write8bit(uint8_t data);
+
+void Write_Qrcode(uint8_t channeln);
+
+void Qr_Text(const uint8_t xpmname[], uint8_t xpos, uint8_t ypost);
+
+void Graphic_Clear(void);
+
+void Graphic_test(void);
+
+void Graphic_init(void);
+
+void Identify_D(uint8_t dispnum);
+
+void Set_Display(uint8_t dispnum);
+
+void Reset_Display(uint8_t dispnum);
+
+void Set_Alldisp(void);
+
+void Reset_Alldisp(void);
+
+void DSP_rd1_init(void);
+
+void DSP_rd2_init(void);
+
+void DSP_rd3_init(void);
+
+void DSP_rd4_init(void);
+/** ***** I2C routines *****/
+
+void myI2C2_WriteNBytes(i2c2_address_t address, uint8_t* data, size_t len);
+
+void ssh1106_write(uint8_t data, uint8_t msize, uint8_t command);
+
+char I2C_Start(char slave_write_address);
+
+void I2C_Ready(void);
+
+bool I2C_Write(uint8_t data);
+
+bool I2C_Stop(void);
+
+uint8_t I2C_Read(uint8_t flag);
+
+void I2C_Ack(void);
+
+void I2C_Nack(void);
+
+
 #ifdef __cplusplus
 extern "C" {
 #endif /* __cplusplus */
